#!/bin/bash
#                 _     _ _                  
#   __ _ _ __ ___| |__ | (_)_ __  _   ___  __
#  / _` | '__/ __| '_ \| | | '_ \| | | \ \/ /
# | (_| | | | (__| | | | | | | | | |_| |>  < 
#  \__,_|_|  \___|_| |_|_|_|_| |_|\__,_/_/\_\
#            01 - BASE SYSTEM INSTALL
answers_file="/archlinux-scripts/answers.env"
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Source environment variables if .env exists
if [ -f "$answers_file" ]; then
    source "$answers_file"
fi

# Function to save variable to .env file
save_to_env() {
    local var_name=$1
    local var_value=$2
    echo "${var_name}=\"${var_value}\"" >> "$answers_file"
}

# Function to check internet connectivity
check_internet() {
    if ! ping -c 1 archlinux.org &>/dev/null; then
        echo -e "${GREEN}No internet connection. Please connect and try again.${NC}"
        exit 1
    fi
}

# Function to get block device
get_block_device() {
    if [ -z "$USER_DEV" ]; then
        clear
        echo -e "${GREEN}Checking available block devices...${NC}"
        lsblk
        read -p "Enter block device (e.g., /dev/sda): " USER_DEV
        if [ ! -b "$USER_DEV" ]; then
            echo -e "${GREEN}Invalid block device${NC}"
            exit 1
        fi
        save_to_env "USER_DEV" "$USER_DEV"
    fi
}

# Function to get username
get_username() {
    if [ -z "$USER_USER" ]; then
        clear
        echo -e "${GREEN}Setting up user account...${NC}"
        read -p "Enter username (default: user): " USER_USER
        USER_USER=${USER_USER:-user}
        save_to_env "USER_USER" "$USER_USER"
    fi
}

# Function to get user password
get_user_password() {
    if [ -z "$USER_USER_PASS" ]; then
        clear
        echo -e "${GREEN}Setting password for user: $USER_USER${NC}"
        read -s -p "Enter user password: " USER_USER_PASS
        echo
        read -s -p "Confirm user password: " USER_PASS_CONFIRM
        echo
        if [ "$USER_USER_PASS" != "$USER_PASS_CONFIRM" ]; then
            echo -e "${GREEN}Passwords do not match!${NC}"
            exit 1
        fi
        save_to_env "USER_USER_PASS" "$USER_USER_PASS"
    fi
}

# Function to get country
get_country() {
    if [ -z "$USER_COUNTRY" ]; then
        clear
        echo -e "${GREEN}Configuring system location...${NC}"
        read -p "Enter country for mirror (default: United States): " USER_COUNTRY
        USER_COUNTRY=${USER_COUNTRY:-"United States"}
        save_to_env "USER_COUNTRY" "$USER_COUNTRY"
    fi
}

# Function to get timezone
get_timezone() {
    if [ -z "$USER_TZ" ]; then
        clear
        echo -e "${GREEN}Setting timezone...${NC}"
        read -p "Enter timezone (default: America/Chicago): " USER_TZ
        USER_TZ=${USER_TZ:-"America/Chicago"}
        save_to_env "USER_TZ" "$USER_TZ"
    fi
}

# Function to get hostname
get_hostname() {
    if [ -z "$USER_HOSTNAME" ]; then
        clear
        echo -e "${GREEN}Setting system hostname...${NC}"
        # Generate random 8-character hex string
        RANDOM_HEX=$(openssl rand -hex 4)
        DEFAULT_HOSTNAME="arch${RANDOM_HEX}"
        read -p "Enter hostname (default: $DEFAULT_HOSTNAME): " USER_HOSTNAME
        USER_HOSTNAME=${USER_HOSTNAME:-$DEFAULT_HOSTNAME}
        save_to_env "USER_HOSTNAME" "$USER_HOSTNAME"
    fi
}

# Function to get root password
get_root_password() {
    if [ -z "$USER_ROOT_PASS" ]; then
        clear
        echo -e "${GREEN}Setting root password...${NC}"
        read -s -p "Enter root password: " USER_ROOT_PASS
        echo
        read -s -p "Confirm root password: " ROOT_PASS_CONFIRM
        echo
        if [ "$USER_ROOT_PASS" != "$ROOT_PASS_CONFIRM" ]; then
            echo -e "${GREEN}Passwords do not match!${NC}"
            exit 1
        fi
        save_to_env "USER_ROOT_PASS" "$USER_ROOT_PASS"
    fi
}

# Function to confirm partition replacement
confirm_partitions() {
    if [ -z "$USER_REPLACE_PART" ]; then
        clear
        echo -e "${GREEN}Configuring partitions...${NC}"
        echo -e "${GREEN}Choose partition setup:${NC}"
        echo -e "${GREEN}1) Replace all partitions with new btrfs layout (default)${NC}"
        echo -e "${GREEN}2) Use existing btrfs, preserve @home, @opt, and @srv (will format others)${NC}"
        read -p "Enter choice (default: 1): " REPLY

        case $REPLY in
            2)
                echo -e "${GREEN}WARNING: This will format all subvolumes except @home, @opt, and @srv${NC}"
                read -p "Are you sure? (y/N): " CONFIRM
                if [[ $CONFIRM =~ ^[Yy]$ ]]; then
                    USER_REPLACE_PART=2
                else
                    USER_REPLACE_PART=1
                fi
                ;;
            *)
                echo -e "${GREEN}WARNING: This will delete all existing partitions on $USER_DEV${NC}"
                read -p "Are you sure? (y/N): " CONFIRM
                if [[ $CONFIRM =~ ^[Yy]$ ]]; then
                    USER_REPLACE_PART=1
                else
                    echo -e "${GREEN}Installation cancelled${NC}"
                    exit 1
                fi
                ;;
        esac
        save_to_env "USER_REPLACE_PART" "$USER_REPLACE_PART"
    fi
}

# Function to create and format partitions
create_partitions() {
    if [ "$USER_REPLACE_PART" -eq 1 ]; then
        echo -e "${GREEN}Creating new partition layout...${NC}"
        # Remove existing partitions
        sgdisk -Z "$USER_DEV"

        # Create new partitions
        echo -e "${GREEN}Creating EFI and root partitions...${NC}"
        sgdisk -n 1:0:+1024M -t 1:ef00 "$USER_DEV" # EFI partition
        sgdisk -n 2:0:0 -t 2:8300 "$USER_DEV"      # Root partition

        # Format partitions
        echo -e "${GREEN}Formatting EFI partition (FAT32)...${NC}"
        mkfs.fat -F32 "${USER_DEV}1"
        echo -e "${GREEN}Formatting root partition (BTRFS)...${NC}"
        mkfs.btrfs -f "${USER_DEV}2"
    fi
}

# Function to attempt mount with fallback
mount_with_fallback() {
    local device=$1
    local mountpoint=$2
    local subvol=$3

    # First attempt with space_cache=v2
    if ! mount -o noatime,compress=zstd,space_cache=v2,subvol="$subvol" "$device" "$mountpoint"; then
        # Second attempt without space_cache=v2
        if ! mount -o noatime,compress=zstd,subvol="$subvol" "$device" "$mountpoint"; then
            echo -e "${GREEN}Failed to mount $subvol on $mountpoint${NC}"
            return 1
        fi
    fi
    return 0
}

# Function to create and mount btrfs subvolumes
setup_btrfs() {
    local preserve_home_opt=$1

    echo -e "${GREEN}Mounting BTRFS root for subvolume management...${NC}"
    # Mount the btrfs partition
    if ! mount "${USER_DEV}2" /mnt; then
        echo -e "${GREEN}Failed to mount root for subvolume creation${NC}"
        exit 1
    fi

    if [ "$preserve_home_opt" = true ]; then
        echo -e "${GREEN}Preserving existing @home, @opt, and @srv subvolumes...${NC}"
        # Check if required subvolumes exist
        if ! btrfs subvolume list /mnt | grep -q "@home" || \
           ! btrfs subvolume list /mnt | grep -q "@opt" || \
           ! btrfs subvolume list /mnt | grep -q "@srv"; then
            echo -e "${GREEN}Error: One or more required subvolumes (@home, @opt, @srv) not found in existing btrfs filesystem${NC}"
            umount /mnt
            exit 1
        fi

        echo -e "${GREEN}Removing old subvolumes (except @home, @opt, and @srv)...${NC}"
        # Delete all subvolumes except @home, @opt, and @srv
        for subvol in $(btrfs subvolume list /mnt | grep -v "@home\|@opt\|@srv" | awk '{print $NF}'); do
            echo -e "${GREEN}Deleting subvolume: $subvol${NC}"
            btrfs subvolume delete "/mnt/$subvol"
        done

        echo -e "${GREEN}Creating new subvolumes...${NC}"
        # Create new subvolumes
        btrfs subvolume create /mnt/@
        btrfs subvolume create /mnt/@.snapshots
        btrfs subvolume create /mnt/@var_log
        btrfs subvolume create /mnt/@tmp
    else
        echo -e "${GREEN}Creating fresh BTRFS subvolume layout...${NC}"
        # Create all subvolumes
        btrfs subvolume create /mnt/@
        btrfs subvolume create /mnt/@home
        btrfs subvolume create /mnt/@.snapshots
        btrfs subvolume create /mnt/@var_log
        btrfs subvolume create /mnt/@opt
        btrfs subvolume create /mnt/@tmp
        btrfs subvolume create /mnt/@srv
    fi

    umount /mnt

    echo -e "${GREEN}Mounting subvolumes...${NC}"
    # Mount subvolumes with appropriate flags
    if ! mount_with_fallback "${USER_DEV}2" /mnt "@" "compress=zstd"; then
        echo -e "${GREEN}Failed to mount root subvolume${NC}"
        exit 1
    fi

    echo -e "${GREEN}Creating mount points...${NC}"
    mkdir -p /mnt/{boot,home,.snapshots,var/log,opt,tmp,srv}

    echo -e "${GREEN}Mounting remaining subvolumes...${NC}"
    # Mount each subvolume with verification
    if ! mount_with_fallback "${USER_DEV}2" /mnt/home "@home" "compress=zstd"; then
        echo -e "${GREEN}Failed to mount home subvolume${NC}"
        exit 1
    fi

    if ! mount_with_fallback "${USER_DEV}2" /mnt/.snapshots "@.snapshots" "compress=zstd"; then
        echo -e "${GREEN}Failed to mount snapshots subvolume${NC}"
        exit 1
    fi

    if ! mount_with_fallback "${USER_DEV}2" /mnt/var/log "@var_log" "compress=zstd"; then
        echo -e "${GREEN}Failed to mount var_log subvolume${NC}"
        exit 1
    fi

    if ! mount_with_fallback "${USER_DEV}2" /mnt/opt "@opt" "compress=zstd"; then
        echo -e "${GREEN}Failed to mount opt subvolume${NC}"
        exit 1
    fi

    if ! mount_with_fallback "${USER_DEV}2" /mnt/tmp "@tmp" "nodev,nosuid,noexec"; then
        echo -e "${GREEN}Failed to mount tmp subvolume${NC}"
        exit 1
    fi

    if ! mount_with_fallback "${USER_DEV}2" /mnt/srv "@srv" "compress=zstd"; then
        echo -e "${GREEN}Failed to mount srv subvolume${NC}"
        exit 1
    fi

    echo -e "${GREEN}Mounting EFI partition...${NC}"
    # Mount boot partition
    if ! mount "${USER_DEV}1" /mnt/boot; then
        echo -e "${GREEN}Failed to mount boot partition${NC}"
        exit 1
    fi

    echo -e "${GREEN}All filesystems mounted successfully!${NC}"
}

# Main script execution
echo -e "${GREEN}Starting Arch Linux installation...${NC}"
check_internet
get_block_device
get_username
get_user_password
get_root_password
get_country
get_timezone
get_hostname
confirm_partitions

# Sync time
echo -e "${GREEN}Synchronizing system time...${NC}"
timedatectl set-ntp true

# Update mirrors
echo -e "${GREEN}Updating mirror list for $USER_COUNTRY...${NC}"
reflector -c "$USER_COUNTRY" --latest 5 --download-timeout 10 --sort rate --save /etc/pacman.d/mirrorlist
echo -e "${GREEN}Synchronizing package databases...${NC}"
pacman -Sy

# Enable parallel downloads in pacman
echo -e "${GREEN}Enabling parallel downloads in pacman...${NC}"
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 5/' /etc/pacman.conf

# Partition and format if requested
if [ "$USER_REPLACE_PART" -eq 1 ]; then
    echo -e "${GREEN}Preparing to create new partition layout...${NC}"
    create_partitions
    setup_btrfs false
elif [ "$USER_REPLACE_PART" -eq 2 ]; then
    echo -e "${GREEN}Checking existing BTRFS partition...${NC}"
    # Verify the partition is btrfs
    if ! blkid "${USER_DEV}2" | grep -q 'TYPE="btrfs"'; then
        echo -e "${GREEN}Error: ${USER_DEV}2 is not a btrfs partition${NC}"
        exit 1
    fi
    setup_btrfs true
fi

# Install base system
echo -e "${GREEN}Installing base system packages (this may take a while)...${NC}"
pacstrap /mnt base linux linux-firmware amd-ucode base-devel neovim micro sudo

echo -e "${GREEN}Copying mirror list to new system...${NC}"
cp "/etc/pacman.d/mirrorlist" "/mnt/etc/pacman.d/"

echo -e "${GREEN}Generating fstab...${NC}"
genfstab -U /mnt >> /mnt/etc/fstab

cp -R "/archlinux-scripts" "/mnt/"
# Copy answers.env to new system
if [ -f answers.env ]; then
    echo -e "${GREEN}Copying answers.env to new system...${NC}"
    cp answers.env /mnt/archlinux-scripts/
fi
chmod -R +x "/mnt/archlinux-scripts" 
echo -e "${GREEN}Base installation complete!${NC}"
echo -e "${GREEN}Running arch-chroot /mnt /archlinux-scripts/arch-install-02-chroot${NC}"
arch-chroot "/mnt" /archlinux-scripts/arch-install-02-chroot
