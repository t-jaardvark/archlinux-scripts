#                 _     _ _                  
#   __ _ _ __ ___| |__ | (_)_ __  _   ___  __
#  / _` | '__/ __| '_ \| | | '_ \| | | \ \/ /
# | (_| | | | (__| | | | | | | | | |_| |>  < 
#  \__,_|_|  \___|_| |_|_|_|_| |_|\__,_/_/\_\
#            02 - CHROOT SECTION                                            
answers_file="/archlinux-scripts/answers.env"

# Define color codes
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_RED='\033[0;31m'
COLOR_RESET='\033[0m'

# Function for colored output
print_msg() {
    local color=$1
    local msg=$2
    echo -e "${color}${msg}${COLOR_RESET}"
}

### BEGIN CHROOT SECTION ###
# Source the answers file
if [ -f "$answers_file" ]; then
    print_msg "$COLOR_GREEN" "Sourcing answers file..."
    source "$answers_file"
else
    print_msg "$COLOR_RED" "Error: $answers_file not found in chroot environment"
    exit 1
fi

ln -sf /usr/share/zoneinfo/$USER_TIMEZONE /etc/localtime
hwclock --systohc

#Localization
print_msg "$COLOR_GREEN" "Generating locales..."
locale-gen
print_msg "$COLOR_GREEN" "Setting up locale.conf..."

#Network Configuration
print_msg "$COLOR_GREEN" "Configuring network settings..."

#User Setup
print_msg "$COLOR_GREEN" "Setting root password..."
echo "root:${USER_ROOT_PASS}" | chpasswd

print_msg "$COLOR_GREEN" "Creating user account..."
useradd -mG wheel "$USER_USER"
echo "${USER_USER}:${USER_USER_PASS}" | chpasswd

print_msg "$COLOR_GREEN" "Installing additional packages..."
pacman -S --noconfirm networkmanager network-manager-applet dialog wpa_supplicant
pacman -S --noconfirm mtools dosfstools git reflector snapper bluez bluez-utils cups xdg-utils
pacman -S --noconfirm xdg-user-dirs alsa-utils pipewire pipewire-alsa pipewire-pulse pipewire-jack base-devel linux-headers

# Check for VirtualBox
if systemd-detect-virt | grep -q "oracle"; then
    print_msg "$COLOR_GREEN" "VirtualBox detected - installing guest additions..."
    pacman -S --noconfirm virtualbox-guest-utils
    systemctl enable vboxservice.service
fi

# Check for EFI system
print_msg "$COLOR_GREEN" "DEBUG: Checking for EFI system..."
print_msg "$COLOR_GREEN" "DEBUG: Base device is: ${USER_DEV}"
print_msg "$COLOR_GREEN" "DEBUG: EFI partition should be: ${USER_DEV}1"
print_msg "$COLOR_GREEN" "DEBUG: Listing disk partitions:"
lsblk

if [ -d "/sys/firmware/efi" ]; then
    print_msg "$COLOR_GREEN" "DEBUG: EFI directory found at /sys/firmware/efi"
    print_msg "$COLOR_GREEN" "DEBUG: Contents of /sys/firmware/efi:"
    ls -la /sys/firmware/efi
    
    print_msg "$COLOR_GREEN" "DEBUG: EFI system detected - installing EFI bootloader packages..."
    pacman -S --noconfirm grub efibootmgr
    
    print_msg "$COLOR_GREEN" "DEBUG: Verifying EFI partition is mounted at /boot:"
    mount | grep boot
    
    print_msg "$COLOR_GREEN" "DEBUG: Contents of /boot before GRUB installation:"
    ls -la /boot
    
    print_msg "$COLOR_GREEN" "DEBUG: Installing GRUB for EFI..."
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    
    print_msg "$COLOR_GREEN" "DEBUG: GRUB installation exit code: $?"
    print_msg "$COLOR_GREEN" "DEBUG: Contents of /boot after GRUB installation:"
    ls -la /boot
else
    print_msg "$COLOR_YELLOW" "DEBUG: No EFI directory found, assuming BIOS system"
    print_msg "$COLOR_GREEN" "DEBUG: Installing GRUB for BIOS..."
    pacman -S --noconfirm grub
    
    print_msg "$COLOR_GREEN" "DEBUG: Installing GRUB to disk: ${USER_DEV}"
    grub-install --target=i386-pc --recheck "${USER_DEV}"
    
    print_msg "$COLOR_GREEN" "DEBUG: GRUB installation exit code: $?"
fi

print_msg "$COLOR_GREEN" "DEBUG: Generating GRUB configuration..."
grub-mkconfig -o /boot/grub/grub.cfg
print_msg "$COLOR_GREEN" "DEBUG: GRUB configuration generation exit code: $?"
print_msg "$COLOR_GREEN" "DEBUG: Contents of /boot/grub:"
ls -la /boot/grub

#######################################################################
# Install Windows-10-Dark theme
mkdir -p /usr/share/themes
pushd /usr/share/themes
git clone https://github.com/B00merang-Project/Windows-10-Dark
popd
#######################################################################
# Install Windows-10 icon theme
mkdir -p /usr/share/icons
pushd /usr/share/icons
git clone https://github.com/B00merang-Artwork/Windows-10
gtk-update-icon-cache -f /usr/share/icons/Windows-10
popd
#######################################################################
# install VictorMono Nerd Font
mkdir -p /usr/share/fonts/TTF
pushd /usr/share/fonts/TTF
curl -L -o "VictorMono.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/VictorMono.zip"
unzip VictorMono.zip
rm VictorMono.zip
popd
#######################################################################
# install yay
pushd /tmp
git clone https://aur.archlinux.org/yay.git
pushd yay
makepkg -si --noconfirm
popd
rm -rf /tmp/yay
popd
#######################################################################


# Snapper Configuration *disabled for now*
# Prepare Snapshot Directory
#umount /.snapshots
#rm -r /.snapshots
#snapper -c root create-config /
#btrfs subvolume delete /.snapshots
#mkdir /.snapshots
#mount -a
#chmod 750 /.snapshots

# Configure Snapper
# Set timeline limits:
#echo 'TIMELINE_LIMIT_YEARLY="0"' > /etc/snapper/configs/root
#echo 'TIMELINE_LIMIT_MONTHLY="0"' >> /etc/snapper/configs/root
#echo 'TIMELINE_LIMIT_WEEKLY="0"' >> /etc/snapper/configs/root
#echo 'TIMELINE_LIMIT_DAILY="7"' >> /etc/snapper/configs/root
#echo 'TIMELINE_LIMIT_HOURLY="5"' >> /etc/snapper/configs/root

#Enable Snapper Services
#systemctl enable --now snapper-timeline.timer
#systemctl enable --now snapper-cleanup.timer

#Desktop Environment Installation
########################################################################################
print_msg "$COLOR_GREEN" "Install Cinnamon..."
pacman -S --needed --noconfirm gnome-keyring cinnamon cinnamon-translations firefox xterm dbus polkit\
 polkit-gnome gnome-terminal gnome-session gnome-settings-daemon
########################################################################################

#Desktop Environment Installation
########################################################################################
print_msg "$COLOR_GREEN" "Installing LightDM Display Manager..."
pacman -S --noconfirm --needed \
    xorg \
    xorg-server \
    xorg-xinit \
    lightdm \
    lightdm-gtk-greeter \
    lightdm-gtk-greeter-settings

# Create proper LightDM configuration with logging
print_msg "$COLOR_GREEN" "Setting up Cinnamon session..."
mkdir -p /usr/share/xsessions
cat > /usr/share/xsessions/cinnamon.desktop << EOF
[Desktop Entry]
Name=Cinnamon
Comment=Window manager and compositor based on Mutter and GNOME 3
Exec=cinnamon-session
TryExec=cinnamon-session
Type=Application
X-LightDM-DesktopName=Cinnamon
DesktopNames=Cinnamon
EOF

# Create a basic Xsession configuration
print_msg "$COLOR_GREEN" "Creating Xsession configuration..."
cat > /etc/X11/xinit/Xsession << EOF
#!/bin/sh
# global Xsession file -- used by display managers and xinit

# Load profile
for file in "/etc/profile" "$HOME/.profile" "/etc/xprofile" "$HOME/.xprofile"; do
    if [ -f "$file" ]; then
        . "$file"
    fi
done

# Load resources
for file in "/etc/X11/Xresources" "$HOME/.Xresources"; do
    if [ -f "$file" ]; then
        xrdb -merge "$file"
    fi
done

# Load keymaps
for file in "/etc/X11/Xkbmap" "$HOME/.Xkbmap"; do
    if [ -f "$file" ]; then
        setxkbmap \`cat "$file"\`
        XKB_IN_USE=yes
    fi
done

# Load xmodmap if not using XKB
if [ -z "$XKB_IN_USE" ]; then
    for file in "/etc/X11/Xmodmap" "$HOME/.Xmodmap"; do
        if [ -f "$file" ]; then
           xmodmap "$file"
        fi
    done
fi

# Run all system xinitrc shell scripts
if [ -d /etc/X11/xinit/xinitrc.d ]; then
    for script in /etc/X11/xinit/xinitrc.d/?*.sh; do
        [ -x "$script" ] && . "$script"
    done
fi

# Start the window manager
if [ -n "$1" ]; then
    exec "$@"
else
    exec cinnamon-session
fi
EOF

chmod +x /etc/X11/xinit/Xsession

# Update LightDM configuration
print_msg "$COLOR_GREEN" "Updating LightDM configuration..."
cat > /etc/lightdm/lightdm.conf << EOF
[Seat:*]
greeter-session=lightdm-gtk-greeter
user-session=cinnamon
session-wrapper=/etc/X11/xinit/Xsession

[LightDM]
log-directory=/var/log/lightdm
minimum-display-number=0
EOF

# Ensure proper permissions
print_msg "$COLOR_GREEN" "Setting proper permissions..."
chmod 755 /etc/X11/xinit
chmod 755 /etc/X11/xinit/Xsession
chown -R root:root /etc/X11/xinit

# Install additional dependencies that might be needed
print_msg "$COLOR_GREEN" "Installing additional dependencies..."
pacman -S --noconfirm --needed \
    xorg-server-xephyr \
    xorg-xauth \
    xorg-xrdb \
    xorg-xmodmap \
    xorg-setxkbmap \
    mesa

# Remove the custom wrapper since we're using the standard Xsession now
rm -f /usr/local/bin/cinnamon-session-wrapper

# Ensure proper home directory permissions
print_msg "$COLOR_GREEN" "Setting up home directory permissions..."
chown -R "${USER_USER}:${USER_USER}" "/home/${USER_USER}"

# Create XDG user directories
print_msg "$COLOR_GREEN" "Setting up XDG user directories..."
xdg-user-dirs-update --force

# Enable required services
print_msg "$COLOR_GREEN" "Enabling required services..."
#systemctl enable lightdm
systemctl enable NetworkManager
systemctl enable bluetooth
systemctl enable cups

# Add user to necessary groups
print_msg "$COLOR_GREEN" "Adding user to required groups..."
usermod -aG audio,video,input,wheel "${USER_USER}"

# Ensure dbus is properly setup
print_msg "$COLOR_GREEN" "Ensuring dbus is properly configured..."
dbus-uuidgen --ensure=/etc/machine-id
systemctl enable dbus

#    Boot Configuration
#        Create boot backup hook
#        Install rsync
#        Update GRUB configuration

# The system is now ready for use with Btrfs filesystem
# and automatic snapshots configured through Snapper.

# Verify LightDM service status
print_msg "$COLOR_GREEN" "Verifying LightDM service status..."
systemctl status lightdm || true
systemctl is-enabled lightdm || true

print_msg "$COLOR_GREEN" "Configuring SSH for root access..."
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
systemctl enable sshd
