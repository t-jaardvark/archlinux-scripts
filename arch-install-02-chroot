#                 _     _ _                  
#   __ _ _ __ ___| |__ | (_)_ __  _   ___  __
#  / _` | '__/ __| '_ \| | | '_ \| | | \ \/ /
# | (_| | | | (__| | | | | | | | | |_| |>  < 
#  \__,_|_|  \___|_| |_|_|_|_| |_|\__,_/_/\_\
#            02 - CHROOT SECTION                                            
answers_file="/archlinux-scripts/answers.env"

# Define color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Source the answers file
if [ -f "$answers_file" ]; then
    echo -e "${GREEN}Sourcing answers file...${NC}"
    source "$answers_file"
else
    echo -e "${RED}Error: $answers_file not found in chroot environment${NC}"
    exit 1
fi

# Set default values if not provided
USER_ROOT_PASS=${USER_ROOT_PASS:-"idk"}
USER_USER_PASS=${USER_USER_PASS:-"idk"}
USER_DEV=${USER_DEV:-"/dev/sda"}
CLEAR_PARTITIONS=${CLEAR_PARTITIONS:-"y"}

# Enable parallel downloads in pacman
echo -e "${GREEN}Enabling parallel downloads in pacman...${NC}"
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 5/' /etc/pacman.conf

echo -e "${GREEN}Setting up timezone...${NC}"
ln -sf /usr/share/zoneinfo/$USER_TIMEZONE /etc/localtime
hwclock --systohc

#Localization
echo -e "${GREEN}Generating locales...${NC}"
locale-gen
echo -e "${GREEN}Setting up locale.conf...${NC}"
echo "LANG=$USER_LOCALE" > /etc/locale.conf
echo "LC_COLLATE=$USER_LOCALE" >> /etc/locale.conf
echo "LC_TIME=$USER_LOCALE" >> /etc/locale.conf

########################################################################################
echo -e "${GREEN}Installing my dotfiles...${NC}"
pacman -S --noconfirm --needed git
git config --global init.defaultBranch main
git clone https://github.com/t-jaardvark/dotfiles /tmp/dotfiles
shopt -s dotglob
mv /tmp/dotfiles/* /etc/skel/
rmdir /tmp/dotfiles
shopt -u dotglob
########################################################################################
#User Setup
echo -e "${GREEN}Setting root password...${NC}"
echo "root:${USER_ROOT_PASS}" | chpasswd

echo -e "${GREEN}Creating user account...${NC}"
useradd -mG wheel "$USER_USER"
echo "${USER_USER}:${USER_USER_PASS}" | chpasswd

echo -e "${GREEN}Configuring sudo access for wheel group...${NC}"
EDITOR='tee' visudo /etc/sudoers.d/wheel-nopasswd << EOF
%wheel ALL=(ALL:ALL) NOPASSWD: ALL
EOF

########################################################################################
echo -e "${GREEN}Installing yay...${NC}"
sudo pacman -S --noconfirm --needed base-devel go
sudo -u "$USER_USER" mkdir -p /tmp/yay && pushd /tmp/yay
sudo -u "$USER_USER" git clone https://aur.archlinux.org/yay.git /tmp/yay
export PACMAN="pacman --noconfirm --needed"
yes | sudo -u "$USER_USER" makepkg -si
sudo -u "$USER_USER" popd
sudo -u "$USER_USER" rm -rf /tmp/yay
echo -e "${GREEN}done installing yay...${NC}"
########################################################################################
echo -e "${GREEN}installing am "application manager"...${NC}"
read -p "Press Enter to continue"
mkdir -p /tmp/am && pushd /tmp/am
wget -q https://raw.githubusercontent.com/ivan-hc/AM/main/AM-INSTALLER && chmod a+x ./AM-INSTALLER && ./AM-INSTALLER
popd && rm -rf /tmp/am
echo -e "${GREEN}done installing am "application manager"...${NC}"


echo -e "${GREEN}Installing additional packages...${NC}"
pacman -S --noconfirm networkmanager network-manager-applet dialog wpa_supplicant
pacman -S --noconfirm mtools dosfstools git reflector snapper bluez bluez-utils cups xdg-utils exfat-utils
pacman -S --noconfirm xdg-user-dirs alsa-utils pipewire pipewire-alsa pipewire-pulse pipewire-jack base-devel linux-headers
pacman -S --noconfirm gvfs-smb samba cifs-utils
pacman -S --noconfirm flatpak libfuse2 exfat-utils ntfs-3g
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

# Configure NTFS3 as default NTFS driver
echo -e "${GREEN}Configuring NTFS3 as default driver...${NC}"
cat > /etc/udev/rules.d/ntfs3_by_default.rules << EOF
SUBSYSTEM=="block", ENV{ID_FS_TYPE}=="ntfs", ENV{ID_FS_TYPE}="ntfs3"
EOF

# Check for VirtualBox
if systemd-detect-virt | grep -q "oracle"; then
    echo -e "${GREEN}VirtualBox detected - installing guest additions...${NC}"
    pacman -S --noconfirm virtualbox-guest-utils
    systemctl enable vboxservice.service
fi

# Check for EFI system
echo -e "${GREEN}Checking for EFI system...${NC}"
echo -e "${GREEN}Base device is: ${USER_DEV}${NC}"
echo -e "${GREEN}EFI partition should be: ${USER_DEV}1${NC}"
echo -e "${GREEN}Listing disk partitions:${NC}"
lsblk

if [ -d "/sys/firmware/efi" ]; then
    echo -e "${GREEN}EFI directory found at /sys/firmware/efi${NC}"
    echo -e "${GREEN}Contents of /sys/firmware/efi:${NC}"
    ls -la /sys/firmware/efi
    
    echo -e "${GREEN}EFI system detected - installing EFI bootloader packages...${NC}"
    pacman -S --noconfirm grub efibootmgr
    
    echo -e "${GREEN}Verifying EFI partition is mounted at /boot:${NC}"
    mount | grep boot
    
    echo -e "${GREEN}Contents of /boot before GRUB installation:${NC}"
    ls -la /boot
    
    echo -e "${GREEN}Installing GRUB for EFI...${NC}"
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    
    echo -e "${GREEN}GRUB installation exit code: $?"
    echo -e "${GREEN}Contents of /boot after GRUB installation:${NC}"
    ls -la /boot
else
    echo -e "${YELLOW}No EFI directory found, assuming BIOS system${NC}"
    echo -e "${GREEN}Installing GRUB for BIOS...${NC}"
    pacman -S --noconfirm grub
    
    echo -e "${GREEN}Installing GRUB to disk: ${USER_DEV}${NC}"
    grub-install --target=i386-pc --recheck "${USER_DEV}"
    
    echo -e "${GREEN}GRUB installation exit code: $?"
fi

echo -e "${GREEN}Generating GRUB configuration...${NC}"
grub-mkconfig -o /boot/grub/grub.cfg
echo -e "${GREEN}GRUB configuration generation exit code: $?"
echo -e "${GREEN}Contents of /boot/grub:${NC}"
ls -la /boot/grub

#######################################################################
echo -e "${GREEN}Install Windows-10-Dark theme...${NC}"
mkdir -p /usr/share/themes
pushd /usr/share/themes
git clone https://github.com/B00merang-Project/Windows-10-Dark
popd
#######################################################################
echo -e "${GREEN}Install Windows-10 icon theme...${NC}"
mkdir -p /usr/share/icons
pushd /usr/share/icons
git clone https://github.com/B00merang-Artwork/Windows-10
gtk-update-icon-cache -f /usr/share/icons/Windows-10
popd
#######################################################################
echo -e "${GREEN}Install VictorMono Nerd Font...${NC}"
mkdir -p /usr/share/fonts/TTF
pushd /usr/share/fonts/TTF
curl -L -o "VictorMono.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/VictorMono.zip"
unzip VictorMono.zip
rm VictorMono.zip
popd
#######################################################################
echo -e "${GREEN}Install Cinnamon...${NC}"
pacman -S --needed --noconfirm gnome-keyring cinnamon cinnamon-translations firefox xterm dbus polkit\
 polkit-gnome gnome-terminal gnome-session gnome-settings-daemon
########################################################################################

#Desktop Environment Installation
########################################################################################
echo -e "${GREEN}Installing LightDM Display Manager...${NC}"
pacman -S --noconfirm --needed \
    xorg \
    xorg-server \
    xorg-xinit \
    lightdm \
    lightdm-gtk-greeter \
    lightdm-gtk-greeter-settings

# Create proper LightDM configuration with logging
echo -e "${GREEN}Setting up Cinnamon session...${NC}"
mkdir -p /usr/share/xsessions
cat > /usr/share/xsessions/cinnamon.desktop << EOF
[Desktop Entry]
Name=Cinnamon
Comment=Window manager and compositor based on Mutter and GNOME 3
Exec=cinnamon-session
TryExec=cinnamon-session
Type=Application
X-LightDM-DesktopName=Cinnamon
DesktopNames=Cinnamon
EOF

# Create a basic Xsession configuration
echo -e "${GREEN}Creating Xsession configuration...${NC}"
cat > /etc/X11/xinit/Xsession << EOF
#!/bin/sh
# global Xsession file -- used by display managers and xinit

# Load profile
for file in "/etc/profile" "$HOME/.profile" "/etc/xprofile" "$HOME/.xprofile"; do
    if [ -f "$file" ]; then
        . "$file"
    fi
done

# Load resources
for file in "/etc/X11/Xresources" "$HOME/.Xresources"; do
    if [ -f "$file" ]; then
        xrdb -merge "$file"
    fi
done

# Load keymaps
for file in "/etc/X11/Xkbmap" "$HOME/.Xkbmap"; do
    if [ -f "$file" ]; then
        setxkbmap \`cat "$file"\`
        XKB_IN_USE=yes
    fi
done

# Load xmodmap if not using XKB
if [ -z "$XKB_IN_USE" ]; then
    for file in "/etc/X11/Xmodmap" "$HOME/.Xmodmap"; do
        if [ -f "$file" ]; then
           xmodmap "$file"
        fi
    done
fi

# Run all system xinitrc shell scripts
if [ -d /etc/X11/xinit/xinitrc.d ]; then
    for script in /etc/X11/xinit/xinitrc.d/?*.sh; do
        [ -x "$script" ] && . "$script"
    done
fi

# Start the window manager
if [ -n "$1" ]; then
    exec "$@"
else
    exec cinnamon-session
fi
EOF

chmod +x /etc/X11/xinit/Xsession

# Update LightDM configuration
echo -e "${GREEN}Updating LightDM configuration...${NC}"
cat > /etc/lightdm/lightdm.conf << EOF
[Seat:*]
greeter-session=lightdm-gtk-greeter
user-session=cinnamon
session-wrapper=/etc/X11/xinit/Xsession

[LightDM]
log-directory=/var/log/lightdm
minimum-display-number=0
EOF

# Ensure proper permissions
echo -e "${GREEN}Setting proper permissions...${NC}"
chmod 755 /etc/X11/xinit
chmod 755 /etc/X11/xinit/Xsession
chown -R root:root /etc/X11/xinit

# Install additional dependencies that might be needed
echo -e "${GREEN}Installing additional dependencies...${NC}"
pacman -S --noconfirm --needed \
    xorg-server-xephyr \
    xorg-xauth \
    xorg-xrdb \
    xorg-xmodmap \
    xorg-setxkbmap \
    mesa

# Remove the custom wrapper since we're using the standard Xsession now
rm -f /usr/local/bin/cinnamon-session-wrapper

# Ensure proper home directory permissions
echo -e "${GREEN}Setting up home directory permissions...${NC}"
chown -R "${USER_USER}:${USER_USER}" "/home/${USER_USER}"

# Create XDG user directories
echo -e "${GREEN}Setting up XDG user directories...${NC}"
xdg-user-dirs-update --force

# Enable required services
echo -e "${GREEN}Enabling required services...${NC}"
#systemctl enable lightdm
systemctl enable NetworkManager
systemctl enable bluetooth
systemctl enable cups

# Add user to necessary groups
echo -e "${GREEN}Adding user to required groups...${NC}"
usermod -aG audio,video,input,wheel "${USER_USER}"

# Ensure dbus is properly setup
echo -e "${GREEN}Ensuring dbus is properly configured...${NC}"
dbus-uuidgen --ensure=/etc/machine-id
systemctl enable dbus

#    Boot Configuration
#        Create boot backup hook
#        Install rsync
#        Update GRUB configuration

# The system is now ready for use with Btrfs filesystem
# and automatic snapshots configured through Snapper.

# Verify LightDM service status
echo -e "${GREEN}Verifying LightDM service status...${NC}"
systemctl status lightdm || true
systemctl is-enabled lightdm || true

echo -e "${GREEN}Configuring SSH for root access...${NC}"
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
systemctl enable sshd

# Update LightDM GTK Greeter configuration with dark theme
echo -e "${GREEN}Configuring LightDM GTK Greeter theme...${NC}"
cat > /etc/lightdm/lightdm-gtk-greeter.conf << EOF
[greeter]
theme-name = Windows-10-Dark
icon-theme-name = Windows-10
font-name = Victor Mono 10
background = #1a1a1a
position = 50%,center 50%,center
clock-format = %H:%M
indicators = ~host;~spacer;~clock;~spacer;~session;~power
EOF

# Make sure LightDM is properly enabled
echo -e "${GREEN}Ensuring LightDM service is enabled...${NC}"
systemctl enable lightdm.service

# Create a symlink to ensure service starts
echo -e "${GREEN}Creating display manager symlink...${NC}"
ln -sf /usr/lib/systemd/system/lightdm.service /etc/systemd/system/display-manager.service

# Verify the service is properly enabled
echo -e "${GREEN}Verifying LightDM service status...${NC}"
systemctl is-enabled lightdm.service || true

echo -e "${GREEN}Setting up default theme configuration...${NC}"

# Create a first-login setup script
cat > /etc/profile.d/set-default-theme.sh << EOF
#!/bin/bash

# Check if this is the first login
if [ ! -f "\$HOME/.theme-configured" ]; then
    # Set GTK3 theme
    gsettings set org.cinnamon.desktop.interface gtk-theme 'Windows-10-Dark'
    gsettings set org.cinnamon.desktop.interface icon-theme 'Windows-10'
    gsettings set org.cinnamon.desktop.interface font-name 'Victor Mono 10'
    
    # Set Cinnamon theme
    gsettings set org.cinnamon.theme name 'Windows-10-Dark'
    gsettings set org.cinnamon.desktop.wm.preferences theme 'Windows-10-Dark'
    
    # Create the marker file
    touch "\$HOME/.theme-configured"
fi
EOF

chmod +x /etc/profile.d/set-default-theme.sh

# Create default dconf settings directory
mkdir -p /etc/dconf/db/local.d/

# Create default theme settings
cat > /etc/dconf/db/local.d/00-theme << EOF
[org/cinnamon/desktop/interface]
gtk-theme='Windows-10-Dark'
icon-theme='Windows-10'
font-name='Victor Mono 10'

[org/cinnamon/desktop/wm/preferences]
theme='Windows-10-Dark'

[org/cinnamon/theme]
name='Windows-10-Dark'
EOF

# Create dconf profile
mkdir -p /etc/dconf/profile
echo "user-db:user
system-db:local" > /etc/dconf/profile/user

# Update dconf database
dconf update

echo -e "${GREEN}Theme configuration complete.${NC}"

pacman -S --noconfirm --needed kitty flameshot mpv vlc rofi libreoffice-fresh signal-desktop geany eza

########################################################################################
#!/bin/bash

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo "Please run as root"
    exit 1
fi

# Update system first
pacman -Syu --noconfirm

# Install awesome window manager and common dependencies
pacman -S --noconfirm awesome xorg-server xorg-xinit xterm vicious lua picom nitrogen kitty
# Create default config directory if it doesn't exist
mkdir -p /etc/xdg/awesome
# Copy default config if it doesn't exist
if [ ! -f /etc/xdg/awesome/rc.lua ]; then
    cp /usr/share/awesome/rc.lua /etc/xdg/awesome/rc.lua
fi
########################################################################################
git clone https://github.com/t-jaardvark/tjwm /tmp/tjwm
pushd /tmp/tjwm
make install
popd && rm -rf /tmp/tjwm
########################################################################################
echo -e "${GREEN}Installing Firefox extensions (uBlock Origin, Dark Reader, SponsorBlock, Bitwarden, QR Code Generator, Old Reddit Redirect, RES, Custom Search Engine)..."
mkdir -p /usr/lib/firefox/distribution
cat > /usr/lib/firefox/distribution/policies.json << EOF
{
    "policies": {
        "DisableProfileImport": true,
        "DisableProfileRefresh": true,
        "NoDefaultBookmarks": true,
        "OverrideFirstRunPage": "",
        "OverridePostUpdatePage": "",
        "DontCheckDefaultBrowser": true,
        "Extensions": {
            "Install": [
                "https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/darkreader/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/sponsorblock/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/bitwarden-password-manager/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/offline-qr-code-generator/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/old-reddit-redirect/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/reddit-enhancement-suite/latest.xpi",
                "https://addons.mozilla.org/firefox/downloads/latest/add-custom-search-engine/latest.xpi"
            ]
        },
        "SearchEngines": {
            "Default": "Kagi",
            "PreventInstalls": true,
            "Install": [
                {
                    "Name": "YouTube",
                    "Description": "YouTube Search",
                    "Alias": "yt",
                    "Method": "GET",
                    "URLTemplate": "https://www.youtube.com/results?search_query={searchTerms}",
                    "IconURL": "https://www.youtube.com/favicon.ico",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Amazon Order History",
                    "Description": "Search Amazon Orders",
                    "Alias": "ao",
                    "Method": "GET",
                    "URLTemplate": "https://www.amazon.com/gp/legacy/order-history?search={searchTerms}",
                    "IconURL": "https://www.amazon.com/favicon.ico",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Amazon ASIN",
                    "Description": "Search by ASIN",
                    "Alias": "asi",
                    "Method": "GET",
                    "URLTemplate": "https://www.amazon.com/dp/product/{searchTerms}",
                    "IconURL": "https://www.amazon.com/favicon.ico",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Libgen NonFiction",
                    "Description": "Search Libgen Non-Fiction",
                    "Alias": "lg",
                    "Method": "GET",
                    "URLTemplate": "https://libgen.is/search.php?req={searchTerms}",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Libgen Fiction",
                    "Description": "Search Libgen Fiction",
                    "Alias": "lf",
                    "Method": "GET",
                    "URLTemplate": "https://libgen.is/fiction/?q={searchTerms}&criteria=&language=en&format=",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Kagi",
                    "Description": "Kagi Search",
                    "Alias": "k",
                    "Method": "GET",
                    "URLTemplate": "https://kagi.com/search?q={searchTerms}",
                    "IconURL": "https://kagi.com/favicon.ico",
                    "SuggestURLTemplate": "https://kagi.com/api/autosuggest?q={searchTerms}",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Kagi Reddit",
                    "Description": "Kagi Reddit Search",
                    "Alias": "kr",
                    "Method": "GET",
                    "URLTemplate": "https://kagi.com/search?q={searchTerms}+site%3Areddit.com",
                    "IconURL": "https://kagi.com/favicon.ico",
                    "Encoding": "UTF-8"
                },
                {
                    "Name": "Kagi Images",
                    "Description": "Kagi Image Search",
                    "Alias": "ki",
                    "Method": "GET",
                    "URLTemplate": "https://kagi.com/images?q={searchTerms}",
                    "IconURL": "https://kagi.com/favicon.ico",
                    "Encoding": "UTF-8"
                }
            ]
        }
    }
}
EOF

# Create Firefox default preferences
mkdir -p /usr/lib/firefox/defaults/pref/
cat > /usr/lib/firefox/defaults/pref/autoconfig.js << EOF
pref("general.config.filename", "firefox.cfg");
pref("general.config.obscure_value", 0);
pref("general.config.sandbox_enabled", false);
EOF

# Create Firefox configuration file
cat > /usr/lib/firefox/firefox.cfg << EOF
//
lockPref("browser.shell.checkDefaultBrowser", false);
lockPref("browser.startup.homepage_override.mstone", "ignore");
lockPref("browser.newtabpage.enabled", false);
lockPref("browser.startup.homepage", "about:blank");
lockPref("browser.search.defaultenginename", "Kagi");
lockPref("browser.search.order.1", "Kagi");
lockPref("browser.search.separatePrivateDefault.ui.enabled", false);
lockPref("browser.search.suggest.enabled", true);
lockPref("browser.urlbar.placeholderName", "Kagi");
lockPref("browser.urlbar.placeholderName.private", "Kagi");
lockPref("browser.search.hiddenOneOffs", "Google,Bing,Amazon.com,eBay,Wikipedia");
lockPref("browser.search.modernConfig", true);
lockPref("distribution.searchplugins.defaultLocale", "en-US");
lockPref("general.config.sandbox_enabled", false);
EOF

# Ensure proper permissions
chmod 644 /usr/lib/firefox/defaults/pref/autoconfig.js
chmod 644 /usr/lib/firefox/firefox.cfg

# Create a distribution preferences directory
mkdir -p /usr/lib/firefox/browser/defaults/preferences/

# Create autoconfig.js
cat > /usr/lib/firefox/browser/defaults/preferences/autoconfig.js << EOF
pref("general.config.filename", "firefox.cfg");
pref("general.config.obscure_value", 0);
pref("general.config.sandbox_enabled", false);
EOF

# Ensure proper permissions
chmod 644 /usr/lib/firefox/browser/defaults/preferences/autoconfig.js


